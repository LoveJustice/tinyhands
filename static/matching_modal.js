// Generated by CoffeeScript 1.4.0
(function() {
  var checkForCanon, get_info, save, toggleState, use;

  toggleState = function(ele) {
    return ele.toggleClass('btn-default btn-success disabled');
  };

  checkForCanon = function() {
    var form_age, form_name, form_phone;
    form_name = $('#form_name')[0];
    form_age = $('#form_age')[0];
    form_phone = $('#form_phone')[0];
    if (form_name.firstElementChild.innerHTML === window.person.name) {
      toggleState($(form_name.lastElementChild).children());
    }
    if (form_age.firstElementChild.innerHTML === window.person.age) {
      toggleState($(form_age.lastElementChild).children());
    }
    if (form_phone.firstElementChild.innerHTML === window.person.phone) {
      return toggleState($(form_phone.lastElementChild).children());
    }
  };

  save = function(name, phone, age) {
    console.log(name, phone, age);
    return $.post(dutils.urls.resolve('matching_modal', {
      id: window.person.id
    }), {
      canonical_name: name,
      canonical_phone: phone,
      canonical_age: age
    }, function(data) {
      console.log(data);
      window.person.name = name;
      window.person.phone = phone;
      return window.person.age = age;
    });
  };

  get_info = function(attribute) {
    var $matched, attrib_val, obj;
    $matched = $("#" + attribute + "s.attribute .matched");
    attrib_val = '';
    $matched.find('li > :first-child').each(function(idx, ele) {
      var $ele;
      $ele = $(ele);
      if ($ele.siblings().children('.btn-success').length > 0) {
        return attrib_val = $ele.data('id');
      }
    });
    obj = {
      value: attrib_val || $("#form_" + attribute + " > span:first-child").text(),
      create: !attrib_val
    };
    console.log(obj);
    return obj;
  };

  use = function(id) {
    var $person_id, $row;
    $row = window.cur_row;
    $person_id = $row.find("[id$=person_id]");
    $person_id.val(id);
    $row.find('[id$=kind]').val(window.person.name);
    $row.find('[id$=name]').val(window.person.name);
    $row.find('[id$=gender]').val(window.person.name);
    $row.find('[id$=age]').val(window.person.age);
    $row.find('[id$=district]').val(window.person.age);
    $row.find('[id$=vdc]').val(window.person.age);
    $row.find('[id$=phone]').val(window.person.phone);
    return $row.find('[id$=relation_to]').val(window.person.phone);
  };

  this.init = function() {
    var $buttons, $save_and_use;
    checkForCanon();
    $buttons = $('.input-group button');
    $buttons.click(function() {
      var $button_to_uncheck, $matching_spans, $text, $text_span, $this;
      $this = $(this);
      $button_to_uncheck = $this.parents('.attribute').find('button.btn-success');
      toggleState($button_to_uncheck);
      $text_span = $this.parent().siblings().eq(0);
      $text = $text_span.text();
      $matching_spans = $this.parents('.attribute').find("span:contains(" + $text + ")");
      $matching_spans = $this.parents('.attribute').find("span").filter(function() {
        return $(this).text() === $text;
      });
      return toggleState($matching_spans.siblings().children('button'));
    });
    $save_and_use = $('#save_and_use');
    return $save_and_use.click(function() {
      return use(window.person.id);
    });
  };

}).call(this);
